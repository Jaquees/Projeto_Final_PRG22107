#include <QApplication>
#include <QWidget>
#include <QGridLayout>
#include <QPushButton>
#include <QMimeData>
#include <QDrag>
#include <QMouseEvent>
#include <QPixmap>

class Checkerboard : public QWidget {
public:
    Checkerboard(QWidget *parent = nullptr) : QWidget(parent) {
        QGridLayout *gridLayout = new QGridLayout(this);
        gridLayout->setSpacing(0);

        const int boardSize = 8;

        int initialBoard[8][8] = {
            {0, 2, 0, 2, 0, 2, 0, 2},
            {2, 0, 2, 0, 2, 0, 2, 0},
            {0, 2, 0, 2, 0, 2, 0, 2},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {0, 0, 0, 0, 0, 0, 0, 0},
            {1, 0, 1, 0, 1, 0, 1, 0},
            {0, 1, 0, 1, 0, 1, 0, 1},
            {1, 0, 1, 0, 1, 0, 1, 0}
        };

        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < 8; ++j) {
                gameBoard[i][j] = initialBoard[i][j];
            }
        }

        for (int row = 0; row < boardSize; ++row) {
            for (int col = 0; col < boardSize; ++col) {
                QPushButton *button = new QPushButton(this);
                button->setFixedSize(50, 50);

                if ((row + col) % 2 == 0) {
                    button->setStyleSheet("background-color: white;");
                } else {
                    button->setStyleSheet("background-color: black;");
                }

                if (gameBoard[row][col] == 1) {
                    QIcon icon("C:\\Users\\sergi\\Documents\\dama\\brancas.png");
                    setButtonIcon(button, icon);
                } else if (gameBoard[row][col] == 2) {
                    QIcon icon("C:\\Users\\sergi\\Documents\\dama\\vermelhas.png");
                    setButtonIcon(button, icon);
                }

                gridLayout->addWidget(button, row, col);
                buttons[row][col] = button;
            }
        }

        setLayout(gridLayout);
        setFixedSize(400, 400);
        setWindowTitle("Tabuleiro de Damas");
    }

    void setButtonIcon(QPushButton *button, const QIcon &icon) {
        button->setIcon(icon);
        button->setIconSize(QSize(40, 40));
        button->installEventFilter(this);
    }

    bool eventFilter(QObject *obj, QEvent *event) override {
        if (event->type() == QEvent::MouseButtonPress) {
            QPushButton *button = qobject_cast<QPushButton*>(obj);
            if (button) {
                selectedPiece = button;
                dragStartPosition = button->pos();
            }
        } else if (event->type() == QEvent::MouseMove && selectedPiece) {
            QMouseEvent *mouseEvent = static_cast<QMouseEvent*>(event);
            if ((mouseEvent->buttons() & Qt::LeftButton) && selectedPiece) {
                QPoint currentPos = mouseEvent->pos() + selectedPiece->pos() - dragStartPosition;

                QDrag *drag = new QDrag(this);
                QMimeData *mimeData = new QMimeData;
                mimeData->setText("Piece");
                drag->setMimeData(mimeData);

                QPixmap pixmap = selectedPiece->icon().pixmap(QSize(40, 40)); // Tamanho do ícone
                drag->setPixmap(pixmap);
                drag->setHotSpot(mouseEvent->pos() - currentPos);

                drag->exec(Qt::MoveAction);
            }
        }
        return QWidget::eventFilter(obj, event);
    }

    void mouseReleaseEvent(QMouseEvent *event) override {
        if (selectedPiece) {
            selectedPiece = nullptr;
        }
    }

    void mousePressEvent(QMouseEvent *event) override {
         QPushButton *clickedButton = qobject_cast<QPushButton*>(childAt(event->pos()));
        if (!clickedButton || !selectedPiece) {
            return;
        }

        QPoint clickedPos = clickedButton->pos() / 50;
        if (clickedPos == dragStartPosition / 50) {
            return;
        }

        QPoint selectedPos = selectedPiece->pos() / 50;
        if (isValidMove(selectedPos, clickedPos)) {
            QIcon icon = clickedButton->icon();
            clickedButton->setIcon(selectedPiece->icon());
            selectedPiece->setIcon(icon);
        }
    }

    bool isValidMove(const QPoint &from, const QPoint &to) {
        if (qAbs(from.x() - to.x()) != 1 || qAbs(from.y() - to.y()) != 1) {
            return false; // Não é um movimento diagonal válido
        }
        if (gameBoard[to.x()][to.y()] != 0) {
           
        }

            return true; 
        }

private:
    int gameBoard[8][8];
    QPushButton *buttons[8][8];
    QPushButton *selectedPiece = nullptr;
    QPoint dragStartPosition;
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    Checkerboard checkerboard;
    checkerboard.show();
    return app.exec();
}
